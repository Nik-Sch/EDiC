{"rule":"ENGLISH_WORD_REPEAT_RULE","sentence":"^\\Q1 bit full adder with the usual A, B and Carry inputs and Y and Carry outputs as well as the XOR and AND outputs.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QAn \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is the computational core of any \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q as it performs all the calculations.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QFor the adder, the third bit inverts the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q input when active (All input bits are XORed with the control bit) and is used as the carry in of the adder.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QaluOp[1] aluOp[0] aluSub Resulting Operation 0 0 0 (\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q) Addition 0 0 1 (\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q) Subtraction 0 1 0 (\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q) AND 0 1 1 (\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q) 1 0 0 (\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q) XOR 1 0 1 (\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q) XNOR 1 1 0 (\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q) logical shift right 1 1 1 (\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q) logical shift left The XOR and AND operations shown in \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q are chosen because they are already implemented in the half-adders and no additional logic is required to implement them.\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_RULE","sentence":"^\\QaluOp[1] aluOp[0] aluSub Resulting Operation 0 0 0 (\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q) Addition 0 0 1 (\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q) Subtraction 0 1 0 (\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q) AND 0 1 1 (\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q) 1 0 0 (\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q) XOR 1 0 1 (\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q) XNOR 1 1 0 (\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q) logical shift right 1 1 1 (\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q) logical shift left The XOR and AND operations shown in \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q are chosen because they are already implemented in the half-adders and no additional logic is required to implement them.\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_RULE","sentence":"^\\QFor logical operations (XOR and AND) the carry flag has no meaning and for shifting operations it equals the last bit that was “carried out” (or is unchanged if shifting by 0 bits).\\E$"}
{"rule":"THE_NN_AND_THE_NN","sentence":"^\\QThe register file has one write port (from the bus) and two read ports of which one reads to the bus and the other is directly connected to the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q input of the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QTherefore, an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is used where the 13 bits that define one cycle of one specific instruction are used as addresses.\\E$"}
{"rule":"TO_NON_BASE","sentence":"^\\QIn the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q the memory address is decoded in such a way, that accesses to addresses 0xfe00 to 0xfeff are performed by any connected \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q devices.\\E$"}
{"rule":"BIT_HYPHEN","sentence":"^\\QTo store the whole 16 bit return address, a second memory \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is used in parallel which only needs 256 bytes of storage.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qreg0NWE - Register 0 write enable (active low): Connects to the clock enable input of the register 0.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qreg1NWE - Register 1 write enable (active low): Connects to the clock enable input of the register 1.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qreg0BusNOE - Register 0 bus output enable (active low): Drives the bus with the value of register 0.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qreg1BusNOE - Register 1 bus output enable (active low): Drives the bus with the value of register 1.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\QmemMar0NWE - \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q bits 7..0 write enable (active low): Connects to the clock enable input of the lower 8 bits of the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\QmemMar1NWE - \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q bits 15..8 write enable (active low): Connects to the clock enable input of the upper 8 bits of the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"DOUBLE_PUNCTUATION","sentence":"^\\QmemMar0NWE - \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q bits 7..0 write enable (active low): Connects to the clock enable input of the lower 8 bits of the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"DOUBLE_PUNCTUATION","sentence":"^\\QmemMar1NWE - \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q bits 15..8 write enable (active low): Connects to the clock enable input of the upper 8 bits of the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qreg0NWE - Register 0 write-enable (active low): Connects to the clock-enable input of the register 0.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qreg1NWE - Register 1 write-enable (active low): Connects to the clock-enable input of the register 1.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qreg0BusNOE - Register 0 bus output-enable (active low): Drives the bus with the value of register 0.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qreg1BusNOE - Register 1 bus output-enable (active low): Drives the bus with the value of register 1.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\QmemMar0NWE - \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q bits 7..0 write-enable (active low): Connects to the clock-enable input of the lower 8 bits of the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\QmemMar1NWE - \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q bits 15..8 write-enable (active low): Connects to the clock-enable input of the upper 8 bits of the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"DOUBLE_PUNCTUATION","sentence":"^\\QmemMar1NWE - \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q bits 15..8 write-enable (active low): Connects to the clock-enable input of the upper 8 bits of the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"DOUBLE_PUNCTUATION","sentence":"^\\QmemMar0NWE - \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q bits 7..0 write-enable (active low): Connects to the clock-enable input of the lower 8 bits of the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qoperations.\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_BEGINNING_RULE","sentence":"^\\QMemory address hold.\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_BEGINNING_RULE","sentence":"^\\QMemory address and data hold.\\E$"}
{"rule":"BIT_HYPHEN","sentence":"^\\QFunction Call: Takes a 16 bit address which the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is set to.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QThe cycles array defines the steps each instruction does in the same way as the instructionFetch array does.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QTo avoid 8 definitions of the same instructions, the op code can contain 'alu' and all 8 instructions are generated.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qflag (OP-Code) Assembler Instruction \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q flags Interpretation 0000 jmp/bal/b Any Always 0001 beq Z==1 Equal 0010 bne Z==0 Not Equal 0011 bcs/bhs C==1 Unsigned \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q 0100 bcc/blo C==0 Unsigned \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q 0101 bmi N==1 Negative 0110 bpl N==0 Positive or Zero 0111 bvs V==1 Overflow 1000 bvc V==0 No overflow 1001 bhi C==1 and Z==0 Unsigned \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q 1010 bls C==0 or Z==1 Unsigned \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q 1011 bge N==V Signed \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q 1100 blt N!=V Signed \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q 1101 bgt Z==0 and N==V Signed \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q 1110 ble Z==0 or N!=V Signed \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q 1111 - Any Never (Not used)\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Qflag (OP-Code) Assembler Instruction \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q flags Interpretation 0000 jmp/bal/b Any Always 0001 beq Z==1 Equal 0010 bne Z==0 Not Equal 0011 bcs/bhs C==1 Unsigned \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q 0100 bcc/blo C==0 Unsigned \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q 0101 bmi N==1 Negative 0110 bpl N==0 Positive or Zero 0111 bvs V==1 Overflow 1000 bvc V==0 No overflow 1001 bhi C==1 and Z==0 Unsigned \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q 1010 bls C==0 or Z==1 Unsigned \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q 1011 bge N==V Signed \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q 1100 blt N!=V Signed \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q 1101 bgt Z==0 and N==V Signed \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q 1110 ble Z==0 or N!=V Signed \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q 1111 - Any Never (Not used)\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QThe following \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q instructions are available: add sub and eor xor xnor lsr lsl \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q instructions always take two parameters.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qcompares the r0 register with the value 10 and if \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q branches to instruction at address 66 and preserves the content of r0.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QThe following memory instructions are supported: str ldr sts lds stf ldf sma\\E$"}
{"rule":"BIT_HYPHEN","sentence":"^\\QThey either take a 16 bit immediate address which is used as the full address for the access or a register as address.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qmov b call ret The \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q instruction either takes two registers or one register and an 8 bit immediate value as parameters.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Qmov b call ret The \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q instruction either takes two registers or one register and an 8 bit immediate value as parameters.\\E$"}
{"rule":"BIT_HYPHEN","sentence":"^\\QThe \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q instruction also takes a 16 bit immediate address which is the destination address for the call.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QAs seen in \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q the line 21 (\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q) is assembled into the instruction \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q which is the location of the instruction after the declarations of the prng label (\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q).\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qlst:asm_snake_excerpt lines 15 to 31 show a function that gets the upper 8 bits of the string address as a parameter in r0.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Qlst:asm_snake_excerpt lines 15 to 31 show a function that gets the upper 8 bits of the string address as a parameter in r0.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QThe character (in r0) is then passed as an argument to the uartwrite function.\\E$"}
{"rule":"A_INFINITIVE","sentence":"^\\QAs can be seen in \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q lines 1 and 2, the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q assembler supports the include keyword followed by a relative or absolute filename in double quotes.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QAn \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q can be seen as an intermediary between Dummies and general purpose Dummies.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QToday's Dummies can have several million logic elements with several hundred MBs of \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, more than thousand floating-point Dummies and usual frequencies of more than 200MHz.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QToday's Dummies can have several million logic elements with several hundred MBs of \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, more than a thousand floating-point Dummies and usual frequencies of more than 200MHz.\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_RULE","sentence":"^\\QBehavioral Verilog Description of the Adder (including XOR and AND) of the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q module.\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_RULE","sentence":"^\\QIt iterates over all 8 bits, calculates the XOR and AND results and based on these and the carry input, the bit result and the carry output is calculated.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QTri-state Logic in FPGA.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QThis is solved with a custom module for each tri-state network “tristatenet.v”.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QThe onoe is only active (low) if exactly one input inoe is active (low) and depending on it, the data output is selected.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QThe \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q instruction only consists of one step and, therefore, the ctrInstrFinishedN signal is asserted in step 2 together with the control signals of the actual instruction.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QDue to ctrInstrFinishedN, the step counter is reset to 0 and the second instruction (pc==1) is executed.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QAn EDIF definition of an instance as exported by OrCAD/CAPTURE.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QThe netlist file used is an *.edn which is exported by OrCAD/CAPTURE version 9.2.1.148.\\E$"}
{"rule":"MISSING_GENITIVE","sentence":"^\\QVerilog implementation for the 74F08 \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"CD_NN","sentence":"^\\QAs they essentially behave as direct connections, the nets on either side of one 0 resistor are merged.\\E$"}
{"rule":"MISSING_GENITIVE","sentence":"^\\QVerilog instantiation of the microcode ROM generated out of three \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q instantiations.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QThe 6 Dummies (3 for the instructionROM and 3 for the microcode) need to be instantiated with the correct data loaded into them.\\E$"}
{"rule":"MISSING_GENITIVE","sentence":"^\\QVerilog instantiation for the tri-state Net PCIN0.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QThe same tristatenet component as in the behavioral implementation is used.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QThen the output port that replaced the bidirectional port is connected to an input of the tristatenet instance and a new net is created for each tristatenet which is the actual value of the net (the output of the tristatenet module).\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QThe tristatenet for the PCIN0 signal (\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q) is represented by the instantiation shown in \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qand EEPROM.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qclock.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q visualizes how the main clock (CLK1 in the waveform) and the clock for the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q (asyncEEPROMSpecialClock in the waveform) differ in phase.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QThe following logical connections are passed through pin headers: Bus (8 bits, bidirectional) \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Address (lower 8 bits, to \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q) Control Signals: ioCE: active when the upper 8 \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q address bits equal 0xfe.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QctrlMemRamWE: write enable signal.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QctrlMemRamOE: output enable signal.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qclk: Clock signal.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qreset: Reset signal.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QRead should only happen when ioCE is active.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QWrite should only happen when ioCE is active.\\E$"}
{"rule":"A_INFINITIVE","sentence":"^\\QImplementing the clock enable with a basic AND gate of the clock and a control bit has the major drawback that glitches of the enable control signal can propagate to the clock input of the register and, therefore, falsely trigger the register.\\E$"}
{"rule":"A_INFINITIVE","sentence":"^\\QThere are two widely used alternatives to the simple AND gate: The enable input can be used as the select input for an multiplexer to the data input of the flip flop, where it multiplexes between the actual input and the current output.\\E$"}
{"rule":"A_INFINITIVE","sentence":"^\\QThere are two widely used alternatives to the simple AND gate: The enable input can be used as the select input for a multiplexer to the data input of the flip-flop, where it multiplexes between the actual input and the current output.\\E$"}
{"rule":"A_NNS","sentence":"^\\QThe \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is, additionally, used as A inputs to the 74F521 (U53 and U60) comparators to detect when a breakpoint is reached.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qoutput.\\E$"}
{"rule":"CD_NN","sentence":"^\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Quantity Function 74F245 17 Tri-state Octal Bus Transceiver 74ABT540 14 Inverting Octal Buffer (\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Driver) 74F157 12 Quad 2 to 1 multiplexer 74F825 10 Octal register with Tri-state, Asynchronous Clear and Clock Enable 74F86 7 Quad XOR 74F08 7 Quad AND 74F521 6 8 bit Inverting Comparator with Enable 28C256 6 \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q with 15 address bits 74ACT245 5 Octal Bus Transceiver used for \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q 74F153 4 Dual 4 to 1 multiplexer 74F32 4 Quad OR 74F151 3 8 to 1 multiplexer 74AS867 3 Synchronous 8 bit cascaded counter with loading 74F273 2 Octal register with clear 74F04 2 Hex Inverter AS6C4008 2 \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q with 19 address bits 50827340 2 hexadecimal display 74ACT14 1 Hex Inverter with Schmitt Trigger DS1813-10 1 Reset Generator 74F374 1 Octal register with output enable 74ABT245 1 Bus driver used for clock and reset Sum 110 -\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qp ram.pdf Timing analysis for the memory latency.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Qfig:timingRam p alu.pdf Timing analysis for the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q latency.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qfig:timingAlu The \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q show three timing analysis for the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Qfig:timingAlu The \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q show three timing analysis for the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qfig:timingRam p alu.pdf Timing analysis for the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q latency.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QFor the memory module (\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q), there are two critical paths: The first comes from the memInstrToRamAddr control signal, through the stack selection logic to the memory address and finally to the buffered output data of the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q on the bus (281.3 ).\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QFor the memory module (\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q), there are two critical paths: The first comes from the memInstrToRamAddr control signal, through the stack selection logic to the memory address and finally to the buffered output data of the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q on the bus (281.3 ).\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QThe second has the same origin but represents the writing option of the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q (272.2 ).\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QAfter the result multiplexer the longest path is from the zero flag to the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q flag register U97 (313.9 ).\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QThis would replace the baseline delay of the bus input in \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q (169.5 ) with 281.3 and, therefore, enlarge the total worst case latency to \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Notwithstanding, because the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is a multicycle \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q it is easily possible to assign two cycles to all \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q operations where the B operand is read from the memory.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QWith this trick, the overall critical path is the maximum of 313.9 and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q which is 313.9 .\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QHowever, the datasheet explicitly states a minimum time for a read strobe pulse duration of 80 .\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QAnother reason for using sockets is that it is easier to change an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q if it is faulty or breaks in the future.\\E$"}
{"rule":"SENTENCE_WHITESPACE","sentence":"^\\QComparison of the rising edge of the clock in different configurations.\\E$"}
{"rule":"LITTLE_BIT","sentence":"^\\QIt can be seen that there is only a little bit of overshoot but at about the middle of the rising edge there is a dip of about 500 .\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QIt can be seen that there is only a little bit of overshoot but at about the middle of the rising edge there is a dip of about 500 .\\E$"}
{"rule":"EN_COMPOUNDS","sentence":"^\\QIt can be seen that the edge looks a bit different which may be explained by the different behavior of different probes in the small time scale.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QAdditionally, the latency of the clock signal can be observed which is about 6 .\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QThe clock frequency was chosen in \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q to have a safety margin of about 30% and, therefore, a latency of 6 is not a problem with a clock period of 416.7 (2.4 ).\\E$"}
{"rule":"HYPOTHESIS_TYPOGRAPHY","sentence":"^\\QThe fix is quite easy as soon as the problem is detected: A new bus driver (74F245) is added in one of the spare slots which A input is connected to H1, the B input to the bus and the output enable signal is connected to a new control signal.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QUART.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\Q2.4 , 14 cycles per loop iteration and 1800 seconds run time\\E$"}
{"rule":"BIT_HYPHEN","sentence":"^\\QBy adding a more complex address logic for the memory it was possible to extend the address space to 16 bits while maintaining a simpler 8 bit data bus.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QIt is feasible to create complex designs with the 74F series with a clock frequency of several .\\E$"}
{"rule":"UNIT_SPACE","sentence":"^\\QEach package included a set of basic logic circuits like 4 2-input NAND gates in the 5400N.\\E$"}
