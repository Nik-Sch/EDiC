signals: [
  {
    name: 'aluYNWE'
    noOp: 1
  }
  {
    name: 'aluNOE'
    noOp: 1
  }
  {
    name: 'reg0NWE'
    noOp: 1
  }
  {
    name: 'reg1NWE'
    noOp: 1
  }
  {
    name: 'regAluSel'
    noOp: 0
  }
  {
    name: 'reg0BusNOE'
    noOp: 1
  }
  {
    name: 'reg0BusNOE'
    noOp: 1
  }
  {
    name: 'memPCLoadN'
    noOp: 1
  }
  {
    name: 'memSPUp'
    noOp: 0
  }
  {
    name: 'memSPNEn'
    noOp: 1
  }
  {
    name: 'memInstrNWE'
    noOp: 1
  }
  {
    name: 'memInstrNOE'
    noOp: 1
  }
  {
    name: 'memMar0NWE'
    noOp: 1
  }
  {
    name: 'memMar1NWE'
    noOp: 1
  }
  {
    name: 'memInstrImmToRam' # not mar
    noOp: 1
  }
  {
    name: 'memRamNWE'
    noOp: 1
  }
  {
    name: 'memRamNOE'
    noOp: 1
  }
  {
    name: 'memPCNEn'
    noOp: 1
  }
  {
    name: 'memPC0FromBusN'
    noOp: 1
  }
  {
    name: 'memPC1FromBusN'
    noOp: 1
  }
  {
    name: 'instrFinishedN' # automatically in script
    noOp: 1
  }
]
instructionFetch: [
  {
    memInstrNWE: 0
  }
  { # wait
    memPCNEn: 0
    memPCLoadN: 1
  }
]
instructions: [
  # alu
  {
    op: '000rsalu' # r = r x s (alu)
    cycles: [
      { # r x s into alu
        aluYNWE: 0
        reg0BusNOE: 's'
        reg1BusNOE: '!s'
        regAluSel: 'r'
      }
      { # alu into r
        aluNOE: 0
        reg0NWE: 'r'
        reg1NWE: '!r'
      }
    ]
  }
  {
    op: '001rsalu' # y = r x s (alu, no write back)
    cycles: [
      { # r x s into alu
        aluYNWE: 0
        reg0BusNOE: 's'
        reg1BusNOE: '!s'
        regAluSel: 'r'
      }
    ]
  }
  {
    op: '011rsalu' # r = r x [s] (mem alu)
    cycles: [
      { # s to mar0
        reg0BusNOE: 's'
        reg1BusNOE: '!s'
        memMar0NWE: 0
      }
      { # wait for ram
        memInstrImmToRam: 0
      }
      { # r x ram into alu
        memInstrImmToRam: 0
        memRamNOE: 0
        aluYNWE: 0
        regAluSel: 'r'
      }
      { # alu into r
        aluNOE: 0
        reg0NWE: 'r'
        reg1NWE: '!r'
      }
    ]
  }
  {
    op: '1100ralu' # r = r x [imm] (mem alu imm)
    cycles: [
      { # immediate -> ram
        memInstrImmToRam: 1
      }
      { # r x ram into alu
        memInstrImmToRam: 1
        memRamNOE: 0
        aluYNWE: 0
        regAluSel: 'r'
      }
      { # alu into r
        aluNOE: 0
        reg0NWE: 'r'
        reg1NWE: '!r'
      }
    ]
  }
  {
    op: '1101ralu' # y = r x [imm] ( mem alu imm)
    cycles: [
      { # immediate -> ram
        memInstrImmToRam: 1
      }
      { # r x ram into alu
        memInstrImmToRam: 1
        memRamNOE: 0
        aluYNWE: 0
        regAluSel: 'r'
      }
    ]
  }
  {
    op: '1000ralu' # r = r x imm (alu)
    cycles: [
      { # immediate -> bus, reg -> alu
        memInstrNOE: 0
        regAluSel: 'r'
        aluYNWE: 0
      }
      { # alu into r
        aluNOE: 0
        reg0NWE: 'r'
        reg1NWE: '!r'
      }
    ]
  }
  {
    op: '1001ralu' # y = r x imm (alu, no write back)
    cycles: [
      { # immediate -> bus, reg -> alu
        memInstrNOE: 0
        regAluSel: 'r'
        aluYNWE: 0
      }
    ]
  }

  # memory ops & io
  {
    op: '010100rs' # r = [s] (ldr)
    cycles: [
      { # s to mar0
        reg0BusNOE: 's'
        reg1BusNOE: '!s'
        memMar0NWE: 0
      }
      { # wait for ram
        memInstrImmToRam: 0
      }
      { # ram to r
        memRamNOE: 0
        reg0NWE: 'r'
        reg1NWE: '!r'
      }
    ]
  }
  {
    op: '1010100r' # r = [imm] (ldr)
    cycles: [
      { # immediate -> ram
        memInstrImmToRam: 1
      }
      { # ram to r
        memRamNOE: 0
        reg0NWE: 'r'
        reg1NWE: '!r'
      }
    ]
  }
  {
    op: '010101rs' # [s] = r (str)
    cycles: [
      { # s to mar0
        reg0BusNOE: 's'
        reg1BusNOE: '!s'
        memMar0NWE: 0
      }
      { # r into ram
        reg0BusNOE: 's'
        reg1BusNOE: '!s'
        memInstrImmToRam: 0
        memRamNWE: 0
      }
    ]
  }
  {
    op: '1010101r' # [imm] = r (str)
    cycles: [
      { # r into ram
        reg0BusNOE: 'r'
        reg1BusNOE: '!r'
        memInstrImmToRam: 1
        memRamNWE: 0
      }
    ]
  }
  {
    op: '010110rs' # r = s
    cycles: [
      { # s to bus to r
        reg0NWE: 'r'
        reg1NWE: '!r'
        reg0BusNOE: 's'
        reg1BusNOE: '!s'
      }
    ]
  }
  {
    op: '1010110r' # r = imm
    cycles: [
      { # imm to bus to r
        reg0NWE: 'r'
        reg1NWE: '!r'
        memInstrNOE: 0
      }
    ]
  }
  # {
  #   op: '0101110r' # r = in
  #   cycles: [
  #     { # in to bus to r
  #       regWr0: '!r'
  #       regWr1: 'r'
  #       inNoe: 0
  #     }
  #   ]
  # }
  # {
  #   op: '0101111r' # out = r
  #   cycles: [
  #     { # r to bus to out
  #       regBusSel: 'r'
  #       regBusNOE: 0
  #       wrOut: 1
  #     }
  #   ]
  # }

  # # jumpy with register
  # {
  #   op: '0100r010' # pc := r if eq
  #   flags: 'eq'
  #   cycles: [
  #     { # r to bus to pc
  #       regBusSel: 'r'
  #       regBusNOE: 0
  #       loadPC: 1
  #     }
  #   ]
  # }
  # {
  #   op: '0100r011' # pc := r if ne
  #   flags: 'ne'
  #   cycles: [
  #     { # r to bus to pc
  #       regBusSel: 'r'
  #       regBusNOE: 0
  #       loadPC: 1
  #     }
  #   ]
  # }
  # {
  #   op: '0100r100' # pc := r if lt
  #   flags: 'lt'
  #   cycles: [
  #     { # r to bus to pc
  #       regBusSel: 'r'
  #       regBusNOE: 0
  #       loadPC: 1
  #     }
  #   ]
  # }
  # {
  #   op: '0100r101' # pc := r if le
  #   flags: 'le'
  #   cycles: [
  #     { # r to bus to pc
  #       regBusSel: 'r'
  #       regBusNOE: 0
  #       loadPC: 1
  #     }
  #   ]
  # }
  # {
  #   op: '0100r110' # pc := r if gt
  #   flags: 'gt'
  #   cycles: [
  #     { # r to bus to pc
  #       regBusSel: 'r'
  #       regBusNOE: 0
  #       loadPC: 1
  #     }
  #   ]
  # }
  # {
  #   op: '0100r111' # pc := r if ge
  #   flags: 'ge'
  #   cycles: [
  #     { # r to bus to pc
  #       regBusSel: 'r'
  #       regBusNOE: 0
  #       loadPC: 1
  #     }
  #   ]
  # }

  # jumpy with immediate
  {
    op: '1010flag' # pc := imm
    cycles: [
      { # imm to pc
        memPCNEn: 0
        memPCLoadN: 0
        memPC0FromBusN: 1
        memPC1FromBusN: 1
      }
    ]
  }
  # jumpy with bus
  {
    op: '1011flag' # pc[7:0] := bus, pc[15:8] := imm[15:8]
    cycles: [
      { # imm to pc
        memPCNEn: 0
        memPCLoadN: 0
        memPC0FromBusN: 0
        memPC1FromBusN: 1
      }
    ]
  }
]